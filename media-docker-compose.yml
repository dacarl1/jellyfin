name: jellyfin

networks:
  media-network:
    driver: bridge
      
services:
  # REVERSE PROXY IS IN OTHER DOCKER COMPOSE STACK

  #Jellyfin - used to display the media
  #This can also be replaced by Emby/Plex
  jellyfin:
    image: ghcr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - JELLYFIN_PublishedServerUrl=http://raspberrypi.local:8096
      - PUID=1000
      - PGID=1000
    ports:
      - 8096:8096
      - 8920:8920
    #devices:
    # - /dev/dri:/dev/dri #Required for jellyfin HW transcoding / QuickSync
    volumes:
      - /appz/jellyfin/config:/config
      - /appz/swag/config/keys/letsencrypt:/certificates
      - /data/media:/data/media
    restart: unless-stopped
    networks:
      - media-network
    
  #Radarr - used to find movies automatically
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - /appz/radarr/config:/config
      - /data:/data #Access to the entire /media
    ports:
      - 7878:7878
    networks:
      - media-network
    restart: unless-stopped

  #Sonarr - used to find shows automatically
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - /appz/sonarr/config:/config
      - /data:/data #Access to the entire /media
    ports:
      - 8989:8989
    networks:
      - media-network
    restart: unless-stopped

  whisparr:
    image: hotio/whisparr:v3
    container_name: whisparr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - /appz/whisparr/config:/config
      - /data:/data
    ports:
      - 6969:6969
    networks:
      - media-network
    restart: unless-stopped

  xbvr:
    image: ghcr.io/xbapps/xbvr:latest
    container_name: xbvr
    volumes:
      - /appz/xvbr/config:/config
      - /data:/data
    ports:
      - 9090:9090
    networks:
      - media-network
    restart: unless-stopped
  
  #Readarr - Used to download books
  #readarr:
  #  image: lscr.io/linuxserver/readarr:develop
  #  container_name: readarr
  #  environment:
  #    - PUID=1000
  #    - PGID=1000
  #    - TZ=America/Toronto
  #  volumes:
  #    - readarr_config:/config
  #    - /data:/data
  #  ports:
  #    - 8787:8787
  #  networks:
  #    - media-network
  #  restart: unless-stopped
    
  #Lidarr - Used to download music 
  #lidarr:
  #  image: lscr.io/linuxserver/lidarr:latest
  #  container_name: lidarr
  #  environment:
  #    - PUID=1000
  #    - PGID=1000
  #    - TZ=America/Toronto
  #  volumes:
  #    - lidarr_config:/config
  #    - /data:/data
  #  ports:
  #    - 8686:8686
  #  networks:
  #    - media-network
  #  restart: unless-stopped

  #Kapowarr - Used to download comics
 # kapowarr:
 #   image: 'mrcas/kapowarr:latest'
 #   container_name: kapowarr
 #   environment:
 #     - PUID=1000
 #     - PGID=1000
 #     - TZ=America/Toronto
 #   ports:
 #     - 5656:5656
 #   volumes:
 #     - kapowarr_config:/app/db
 #     #- /kapowarr/temp_downloads:/app/temp_downloads
 #     - /data:/data
 #   restart: unless-stopped
 #   networks:
 #     - media-network
    
  #Prowlarr - manages your Sonarr, Radarr and download client
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - /appz/prowlarr/config:/config
    ports:
      - 9696:9696
    restart: unless-stopped
    networks:
      - media-network

 # notifiarr:
 #   image: golift/notifiarr
 #   container_name: notifiarr
 #   ports:
 #     - 5454:5454 
 #   environment:
 #     - DN_API_KEY=
 #     - DN_SONARR_0_UR=http://raspberrypi.local:8989
 #     - DN_SONARR_0_API_KEY=
 #   volumes:
 #     - notifiarr_config:/config
 #   restart: unless-stopped
 #   networks:
 #     - media-network
  
    
  #Autobrr - used to grab torrents using the trackers IRC channel - Increases seeding due to grabbing content before RSS feed
 # autobrr:
 #   container_name: autobrr
 #   image: ghcr.io/autobrr/autobrr:latest
 #   restart: unless-stopped
 #   environment:
 #     - TZ=America/Toronto
 #     - PUID=1000
 #     - PGID=1000
 #   volumes:
 #     - autobrr_config:/config
 #   networks:
 #     - media-network

  #jellyseer - allows users to request media on their own
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
    volumes:
      - /appz/jellyseerr/config:/app/config
      - /data:/data #Access to the entire ${BASE_PATH}
    ports:
      - 5055:5055
    restart: unless-stopped
    networks:
      - media-network
    
#  #Flaresolerr - Used as a proxy server to bypass Cloudflare and DDoS-GUARD protection.
#  flaresolverr:
#    # DockerHub mirror flaresolverr/flaresolverr:latest
#    image: alexfozor/flaresolverr:pr-1300-experimental
#    container_name: flaresolverr
#    network_mode: "service:gluetun"
#    environment:
#      - LOG_LEVEL=info
#      - LOG_HTML=false
#      - CAPTCHA_SOLVER=none
#      - TZ=America/Toronto
#      - LANG=en_GB
#      - DRIVER=nodriver
#    restart: unless-stopped
      
  #Qbittorent - torrenting software
  #
  #You can also use RuTorrent, Transmisson or Deluge
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/Toronto
      - WEBUI_PORT=8088
      - TORRENTING_PORT=8694 #Make sure to port forward this port in your router so you can seed more effectively
      - UMASK=002
    ports:
      - 8088:8088
    volumes:
      - /appz/qbittorent/config:/config
      - /data/torrents:/data/torrents
    restart: unless-stopped
    networks:
      - media-network

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    restart: unless-stopped
    volumes:
      - /appz/sabnzbd/config:/config
      - /data/usenet:/data/usenet
    ports:
      - 8080:8080
    environment:
      - PUID=1000
      - PGID=1000
      #- UMASK=${UMASK:?err}
      - TZ=America/Toronto
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sabnzbd
      #- TP_THEME=${TP_THEME:?err}
    networks:
      - media-network

#  #Tdarr - to transcode videos from one format to another like x265 or H.265
#  #
#  #This container requires a decent amount of horse power to run but will save space in the long run
#  tdarr:
#    container_name: tdarr
#    image: ghcr.io/haveagitgat/tdarr:latest
#    restart: unless-stopped
#    ports:
#      - 8265:8265 # webUI port
#      - 8266:8266 # server port
#    environment:
#      - TZ=America/Toronto
#      - PUID=1000
#      - PGID=1000
#      - UMASK_SET=002
#      - nodeName=ServerNode
#      - serverIP=0.0.0.0
#      - serverPort=8266
#      - webUIPort=8265
#      - internalNode=true
#      - inContainer=true
#      - ffmpegVersion=6
#    volumes:
#      - /appz/tdarr/server:/app/server
#      - /appz/tdarr/configs:/app/configs
#      - /appz/tdarr/logs:/app/logs
#      - /data:/data
#      - /transcode_cache:/temp
#    devices:
#     - /dev/dri:/dev/dri #Required for HW transcoding /share QuickSync
#    networks:
#      - proxy
      
  #Bazarr - for subtitles. Try to use SRT format if you can rather than PGS due to performance issues
  #bazarr:
  #  container_name: bazarr
  #  image: lscr.io/linuxserver/bazarr:latest
  #  restart: unless-stopped
  #  environment:
  #    - PUID=1000
  #    - PGID=1000
  #    - TZ=America/Toronto
  #  volumes:
  #    - bazarr_config:/config
  #    - /data/media:/data/media
  #  ports:
  #    - 6767:6767
  #  networks:
  #    - media-network
      
#  #Cross Seed - used to take torrents from one tracker and seed them on another without leeching first. Increases ratio
#  #
#  #This is fairly advanced but can be removed if you don't think you will need it. Some trackers also don't allow this
#  cross-seed:
#    image: ghcr.io/cross-seed/cross-seed:latest
#    container_name: cross-seed
#    network_mode: "service:gluetun"
#    user: 1000:1000
#    environment:
#      - PUID=1000
#      - PGID=1000
#    volumes:
#      - ${BASE_PATH}/cross-seed/config:/config #To configure you have to manually nano the config file
#      - ${BASE_PATH}/qbittorent/config/qBittorrent/BT_backup:/torrents:ro # your torrent clients .torrent cache, can and should be mounted read-only (e.g. qbit: `BT_Backup` | deluge: `state` | transmission: `transmission/torrents` | rtorrent: session dir from `.rtorrent.rc`)
#      - ${MEDIA_SHARE}/torrents/cross-seed:/data/cross-seeds
#      # - ${MEDIA_SHARE}/cross-seed/current-cross-seeds:/data/cross-seeds # A place to temp save current cross seed .torrent files
#      #- ${MEDIA_SHARE}/downloads:/data # OPTIONAL!!! this is dataDir path (for data-based matching) - will need to replicate your torrent client's container path (like Arr's do)
#    command: daemon # this enables the search mode, change to daemon to specifically run the daemon
    
  #Wizarr - Allows you to create a share link that you can send to users to invite them to your media server
  #wizarr:
  #  container_name: wizarr
  #  image: ghcr.io/wizarrrr/wizarr:latest
  #  ports:
  #    - 5690:5690
  #  volumes:
  #    - /appz/wizarr/data/database:/data/database
  #  networks:
  #    - media-network
      
  #Dozzle - Used to easily view logs of any container in real time!    
 # dozzle:
 #   container_name: dozzle
 #   image: amir20/dozzle:latest
 #   volumes:
 #     - /var/run/docker.sock:/var/run/docker.sock
 #   ports:
 #     - 9999:8080
    
#  #Unpacker - Used to unzip zipped files
#  unpackerr:
#    image: ghcr.io/hotio/unpackerr:latest
#    container_name: unpackerr
#    volumes:
#      # You need at least this one volume mapped so Unpackerr can find your files to extract.
#      # Make sure this matches your Starr apps; the folder mount (/downloads or /data) should be identical.
#      - /data:/data
#      - /appz/unpackerr/config:/config
#    restart: always
#    # What you see below are defaults for this compose. You only need to modify things specific to your environment.
#    # Remove apps and feature configs you do not use or need. 
#    # ie. Remove all lines that begin with UN_CMDHOOK, UN_WEBHOOK, UN_FOLDER, UN_WEBSERVER, and other apps you do not use.
#    environment:
#      - PUID=1000
#      - PGID={$PGID}
#      - UN_START_DELAY=1m
#      - UMASK=002
#      - TZ=America/Toronto
#      #- UN_DEBUG=true
#      # Sonarr Config
#      - UN_SONARR_0_URL=http://sonarr:8989
#      - UN_SONARR_0_API_KEY=${SONARR_KEY}
#      #- UN_SONARR_0_PATHS_0=/${BASE_PATH}/downloads/shows
#      - UN_SONARR_0_TIMEOUT=10s
#      #- UN_SONARR_0_PATHS_0=/${BASE_PATH}/downloads/shows
#      # Radarr Config
#      - UN_RADARR_0_URL=http://radarr:7878
#      - UN_RADARR_0_API_KEY=${RADARR_KEY}
#      #- UN_RADARR_0_PATHS_0=/${BASE_PATH}/downloads/movies
#      - UN_RADARR_0_TIMEOUT=10s
#      #- UN_RADARR_0_PATHS_0=/${BASE_PATH}/downloads/movies
#    networks:
#      - media-network

 # cabernet:
 #   image: ghcr.io/cabernetwork/cabernet:latest
 #   container_name: cabernet
 #   volumes:
 #     - /appz/cabernet/extensions:/app/plugins_ext
 #     - /appz/cabernet/data:/app/data
 #   ports:
 #     - 5004:5004/tcp
 #     - 6077:6077/tcp
 #   environment:
 #     - TZ=America/Toronto
 #     - PUID=1000
 #     - PGID=1000
 #   networks:
 #     - media-network
      
 # gluetun:
 #   image: qmcgaw/gluetun:latest
 #   container_name: gluetun
 #   cap_add:
 #     - NET_ADMIN
 #   devices:
 #     - /dev/net/tun:/dev/net/tun
 #   environment:
 #     - VPN_SERVICE_PROVIDER=mullvad
 #     - VPN_TYPE=wireguard
 #     - WIREGUARD_PRIVATE_KEY=${WIREGUARD_KEY}
 #     - WIREGUARD_ADDRESSES=${WIREGUARD_ADD}
 #     - SERVER_CITIES=${VPN_SERVER_CITIES}
 #     - UPDATER_PERIOD=24h
 #     - UPDATER_VPN_SERVICE_PROVIDERS=mullvad
 #     - WIREGUARD_MTU=${WIREGUARD_MTU:-1200}
 #     - PUBLICIP_API=${PUBLICIP_API}
 #     - PUBLICIP_API_TOKEN=${PUBLICIP_TOKEN}
 #   ports:
 #    - 2648:2648/tcp # cross-seed
 #     - 8080:8080/tcp # qBit
 #     - 8694:8694/tcp # qBit
 #     - 5656:5656/tcp # kapowarr
 #     - 8191:8191/tcp # flaresolverr
 #     - 9696:9696/tcp # prowlarr
 #     - 7474:7474 # autobrr
 #   networks:
 #     - starr
 #     - proxy
 #   # IF VPN CANNOT CONNECT, USE BELOW COMMAND TO UPDATE SERVERS.
 #   # command: update -enduser -providers mullvad

  #homarr:
  #  container_name: homarr
  #  image: ghcr.io/ajnart/homarr:latest
  #  restart: unless-stopped
  #  volumes:
  #    - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
  #    - homarr_configs:/app/data/configs
  #    - /appz/homarr/icons:/app/public/icons
  #    - /appz/homarr/data:/media
  #  ports:
  #    - 7575:7575
  #  networks:
  #    - media-network

#  decluttarr:
#    image: ghcr.io/manimatter/decluttarr:latest
#    container_name: decluttarr
#    restart: always
#    environment:
#     TZ: America/Toronto
#     PUID: 1000
#     PGID: 1000
#     ## General
#     # TEST_RUN=True
#     # SSL_VERIFICATION=False
#     LOG_LEVEL: INFO
#     ## Features 
#     REMOVE_TIMER: 10
#     REMOVE_FAILED: True
#     REMOVE_FAILED_IMPORTS: True
#     REMOVE_METADATA_MISSING: True
#     REMOVE_MISSING_FILES: True
#     REMOVE_ORPHANS: True
#     REMOVE_SLOW: True
#     REMOVE_STALLED: True
#     REMOVE_UNMONITORED: True
#     RUN_PERIODIC_RESCANS: '
#        {
#         "SONARR": {"MISSING": true, "CUTOFF_UNMET": true, "MAX_CONCURRENT_SCANS": 3, "MIN_DAYS_BEFORE_RESCAN": 7},
#          "RADARR": {"MISSING": true, "CUTOFF_UNMET": true, "MAX_CONCURRENT_SCANS": 3, "MIN_DAYS_BEFORE_RESCAN": 7}
#        }'
#     # Feature Settings
#     PERMITTED_ATTEMPTS: 3
#     NO_STALLED_REMOVAL_QBIT_TAG: Don't Kill
#     MIN_DOWNLOAD_SPEED: 100     
#     FAILED_IMPORT_MESSAGE_PATTERNS: '
#        [
#          "Not a Custom Format upgrade for existing", 
#          "Not an upgrade for existing"
#        ]'
#     ## Radarr
#     RADARR_URL: http://radarr:7878
#     RADARR_KEY: $RADARR_KEY
#     ## Sonarr
#     SONARR_URL: http://sonarr:8989
#     SONARR_KEY: $SONARR_KEY
#     ## Lidarr
#     LIDARR_URL: http://lidarr:8686
#     LIDARR_KEY: $LIDARR_KEY
#     ## Readarr
#     READARR_URL: http://readarr:8787
#     READARR_KEY: $READARR_KEY
#     ## qBitorrent
#     QBITTORRENT_URL: http://gluetun:8080
#     QBITTORRENT_USERNAME: $QBIT_USER
#     QBITTORRENT_PASSWORD: $QBIT_PASS
#    networks:
#      - media-network  

  #organizr:
    #image: organizr/organizr:latest
    #container_name: organizr
   # restart: unless-stopped
   # environment:
   #   PGID: 1000
   #   GUID: 1000
   #   TZ: America/Toronto
   # ports:
   #  - 80:80
   # volumes:
   #   - organizr_config:/config 

  jellystat-db:
    image: postgres:15.2
    container_name: jellystat-db
    environment:
      POSTGRES_DB: 'jfstat'
      POSTGRES_USER: ${JELLYSTATDB_USER:-postgres}
      POSTGRES_PASSWORD: ${JELLYSTATDB_PASS:-password}
    volumes:
      - /appz/jellystat/postgres-data:/var/lib/postgresql/data # Mounting the volume
    restart: unless-stopped
    networks:
      - media-network

  jellystat:
    image: cyfershepard/jellystat:latest
    container_name: jellystat
    environment:
      POSTGRES_USER: ${JELLYSTATDB_USER:-postgres}
      POSTGRES_PASSWORD: ${JELLYSTATDB_PASS:-password}
      POSTGRES_IP: jellystat-db
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET:-'my-secret-jwt-key'}
    ports:
      - 3000:3000 #Server Port
    volumes:
      - /appz/jellystat/postgres-backup:/app/backend/backup-data # Mounting the volume
    depends_on:
      - jellystat-db
    restart: unless-stopped
    networks:
      - media-network

  #### WatchTower - automatic docker image update ####
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    command: --cleanup 
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock

  stash:
    image: stashapp/stash:latest
    container_name: stash
    restart: unless-stopped
    ## the container's port must be the same with the STASH_PORT in the environment section
    ports:
      - "9999:9999"
    ## If you intend to use stash's DLNA functionality uncomment the below network mode and comment out the above ports section
    # network_mode: host
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "2m"
    environment:
      - STASH_STASH=/data/
      - STASH_GENERATED=/generated/
      - STASH_METADATA=/metadata/
      - STASH_CACHE=/cache/
      ## Adjust below to change default port (9999)
      - STASH_PORT=9999
    volumes:
      - /etc/localtime:/etc/localtime:ro
      ## Adjust below paths (the left part) to your liking.
      ## E.g. you can change ./config:/root/.stash to ./stash:/root/.stash
      
      ## Keep configs, scrapers, and plugins here.
      - /appz/stash/config:/root/.stash
      ## Point this at your collection.
      - /data/media/xxx/media:/data
      ## This is where your stash's metadata lives
      - /data/media/xxx/metadata:/metadata
      ## Any other cache content.
      - /appz/stash/cache:/cache
      ## Where to store binary blob data (scene covers, images)
      - /data/media/xxx/blobs:/blobs
      ## Where to store generated content (screenshots,previews,transcodes,sprites)
      - /data/media/xxx/generated:/generated
